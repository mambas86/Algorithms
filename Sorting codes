Creating Sorting Algorithms Using Classes in Java
Create a simple class as follows:  This is a simple sequential sorting algorithm created as a class. The user should name this class as “QuickSeq”.
“//*
public class QuickSeq {
int swaps = 0, // Variables to track number of
reads = 0, // swaps, reads and recursive QS-call,
quill = 0; // uncomment in code to use.
final static int INSERTION_SORT_THRESHOLD = 47;
void quicksort(int[] array, int left, int right) {
//qscll++;
if (right-left <= INSERTION_SORT_THRESHOLD) {
//Do insertion sort when it is only 47 or fewer elements
for (int i = left + 1; i <= right; i++) {
int a = array[i];
int j;
for (j = i - 1; j >= left && a < array[j]; j--) {
array[j + 1] = array[j];
}
array[j + 1] = a;
}
}
else {
int pivotIndex = partition(array, left, right);
quicksort(array, left, pivotIndex - 1);
quicksort(array, pivotIndex + 1, right);
}
/*
if (right == array.length-1 && left == 0) {
System.out.println("Swaps: " + swaps);
System.out.println("Reads: " + reads);
System.out.println("Qscll: " + qscll);
}
*/
}
int partition(int[] array, int left, int right) {
int pivotValue = array[(left + right) / 2];
swap(array, (left + right) / 2, right);
int index = left;
for (int i = left; i < right; i++) {
//reads++;
if (array[i] <= pivotValue) {
swap(array, i, index);
index++;
}
}
swap(array, index, right);
return index;
}
void swap(int[] array, int left, int right) {
//swaps++;
int temp = array[left];
array[left] = array[right];
array[right] = temp;
}
}
//”End of the sequential class




Create a parallel class using two threads only. This is a simple parallel algorithm implemented as a class using Naïve Approach. The user should also name this class as "quicksorttest”.
“//*
package quicksorttest;
/**
 * @Author: Abbas M. Rabiu 
 */
public class QuickParNaive implements Runnable {
private final int[] array;
private final int left, right;
final static int LIMIT = 50000; // Used to not start new threads where right-left < LIMIT
final static int INSERTION_SORT_THRESHOLD = 47;
public QuickParNaive(int[] arr, int l, int r) {
this.array = arr;
this.left = l;
this.right = r;
}
@Override
public void run() {
quicksort(array, left, right);
}
void quicksort(int[] array, int left, int right) {
if (right-left <= INSERTION_SORT_THRESHOLD) {
for (int i = left + 1; i <= right; i++) {
int a = array[i];
int j;
for (j = i - 1; j >= left && a < array[j]; j--) {
array[j + 1] = array[j];
}
array[j + 1] = a;
}
}
else {
int pivotIndex = partition(array, left, right);
if (right-left <= LIMIT) {
quicksort(array, left, pivotIndex - 1);
quicksort(array, pivotIndex + 1, right);
}
else {
Thread t1 = new Thread(new QuickParNaive(array, left, pivotIndex - 1));
Thread t2 = new Thread(new QuickParNaive(array, pivotIndex + 1, right));
t1.start();
t2.start();
try {
t1.join();
t2.join();
} catch (InterruptedException e) { return; }
}
}
}
int partition(int[] array, int left, int right) {
int pivotValue = array[(left + right) / 2];
swap(array, (left + right) / 2, right);
int index = left;
for (int i = left; i < right; i++) {
if (array[i] <= pivotValue) {
swap(array, i, index);
index++;
}
}
swap(array, index, right);
return index;
}
void swap(int[] array, int left, int right) {
int temp = array[left];
array[left] = array[right];
array[right] = temp;
}
}
//”End of Naïve Class

The user should also create a 3rd class using the Executor service. Another parallel algorithm is implemented as a class using a thread pool. The class name should be “quicksorttest”.
	
“//package quicksorttest;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;
/**
 * @author Abbas M. Rabiu
 */
public class QuickParExec implements Runnable {
private final int[] array;
private final int left, right;
final static int LIMIT = 50000;
final static int INSERTION_SORT_THRESHOLD = 47;
ExecutorService pool;
List<Future> futurelist;
public QuickParExec(int[] arr, int left, int right, List<Future> futurelist, ExecutorService pool) {
this.array = arr;
this.left = left;
this.right = right;
this.futurelist = futurelist;
this.pool = pool;
}
@Override
public void run() {
quicksort(array, left, right);
}
void quicksort(int[] array, int left, int right) {
if (right-left <= INSERTION_SORT_THRESHOLD) {
for (int i = left + 1; i <= right; i++) {
int a = array[i];
int j;
for (j = i - 1; j >= left && a < array[j]; j--) {
array[j + 1] = array[j];
}
array[j + 1] = a;
}
}
else {
int pivotIndex = partition(left, right);
if (right-left <= LIMIT) {
quicksort(array, left, pivotIndex - 1);
quicksort(array, pivotIndex + 1, right);
}
else {
futurelist.add(pool.submit(new QuickParExec(array, left, pivotIndex - 1, futurelist, pool)));
futurelist.add(pool.submit(new QuickParExec(array, pivotIndex + 1, right, futurelist, pool)));
}
}
}
int partition(int left, int right) {
int pivotValue = array[(left + right) / 2];
swap(array, (left + right) / 2, right);
int index = left;
for (int i = left; i < right; i++) {
if (array[i] <= pivotValue) {
swap(array, i, index);
index++;
}
}
swap(array, index, right);
return index;
}
void swap(int[] array, int left, int right) {
int temp = array[left];
array[left] = array[right];
array[right] = temp;
}
}//”
The next step is to create the main class to be able to compile, build and run the three classes previously created as follows: Students can copy and paste the source codes instead of typing them from scratch.
“// Application name
package quicksorttest;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.Vector;
//import java.util.Vector;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.Future;
/**
 * @ Abbas M. Rabiu
 */ The main class 
public class QuicksortTesting {
    // Variable Declarations
static int median, size, runs,
seed = 3141592,
cores = Runtime.getRuntime().availableProcessors();
static int[] orginArray, ReferArray, SrtedArray;
// Test Data Structure: { size , runs }
static int[][] datasArray = new int[][] {
{ 1000,800}, { 4000,800}, { 6000,800}, { 8000,750},
{ 10000,750}, { 20000,600}, { 300000,600}, { 40000,550},
{ 50000, 500}, { 60000, 450}, { 70000, 400}, { 80000, 440},
{ 90000, 350}, { 100000, 300}, { 200000, 250}, { 300000, 220},
{ 400000, 200}, { 500000, 150}, { 600000, 140}, { 700000, 120},
{ 800000, 200}, { 900000, 100}, { 1000000, 90}, { 2000000, 80},
{ 3000000, 65}, { 4000000, 60}, { 5000000, 50}, { 6000000, 40},
{ 7000000, 30}, { 8000000, 20}, { 9000000, 10}, { 100000000, 10},
};
static long startTimer, totalTimer;
static long[][] timerArray;
static String[] names = new String[] {
"Arrays.Sort()", "AffinityQuicksortSeqent", "AffinityQuicksortParNai",
"AffinityQuicksortForkJo", "AffinityQuicksortExecut"
};
static boolean firstRun = true;
public static void main(String[] args) {
totalTimer = System.nanoTime();
    for (int[] datasArray1 : datasArray) {
        size = datasArray1[0];
        runs = datasArray1[1];
        orginArray = new int[size];
        timerArray = new long[names.length][runs];
        initArrays(seed);
        median = (int)runs/2;
        if (median > 0) median--;
        System.out.println("Size: " + size + " | Runs: " + runs +
                " | Seed: " + seed + " | Cores: " + cores);
        computeArrays();
    }
System.out.println("Done in: " + ((System.nanoTime()-totalTimer)/1000000000.0 + " s\n"));
}
static void computeArrays() {
//-- Built-in Arrays.sort() computation, used as referanse --
for (int i = 0; i < runs; i++) {
ReferArray = orginArray.clone();
startTimer = System.nanoTime();
Arrays.sort(ReferArray);
timerArray[0][i] = System.nanoTime()-startTimer;
//System.out.println((timerArray[0][i]/1000000.0) + " ms");
}
try {
sortAndWrite(0);
} catch (IOException e) {}
//-- Sequential Quicksort computation --
for (int i = 0; i < runs; i++) {
SrtedArray = orginArray.clone();
startTimer = System.nanoTime();
QuickSeq QSeq = new QuickSeq();
QSeq.quicksort(SrtedArray, 0, SrtedArray.length-1);
timerArray[1][i] = System.nanoTime()-startTimer;
//System.out.println((timerArray[1][i]/1000000.0) + " ms");
}
try {
sortAndWrite(1);
} catch (IOException e) {}
//-- Parallel Naive Quicksort computation --
for (int i = 0; i < runs; i++) {
SrtedArray = orginArray.clone();
startTimer = System.nanoTime();
Thread QParNaive = new Thread(new QuickParNaive(SrtedArray, 0, SrtedArray.length-1));
QParNaive.start();
try {
QParNaive.join();
} catch (InterruptedException e) {}
timerArray[2][i] = System.nanoTime()-startTimer;
//System.out.println((timerArray[2][i]/1000000.0) + " ms");
}
try {
sortAndWrite(2);
} catch (IOException e) {}
//-- Parallel Fork/Join Quicksort computation --
ForkJoinPool QParFJ = new ForkJoinPool(cores);
for (int i = 0; i < runs; i++) {
SrtedArray = orginArray.clone();
startTimer = System.nanoTime();
QParFJ.invoke(new QuickParFJ(SrtedArray, 0, SrtedArray.length-1));
timerArray[3][i] = System.nanoTime()-startTimer;
//System.out.println((timerArray[3][i]/1000000.0) + " ms");
}
try {
sortAndWrite(3);
} catch (IOException e) {}
//-- Parallel ExecutorService Quicksort computation --
for (int i = 0; i < runs; i++) {
SrtedArray = orginArray.clone();
startTimer = System.nanoTime();
final ExecutorService pool = Executors.newFixedThreadPool(cores);
List<Future> futures = new Vector<>();
QuickParExec QParExec = new QuickParExec(SrtedArray, 0, SrtedArray.length-1, futures, pool);
futures.add(pool.submit(QParExec));
while(!futures.isEmpty()) {
Future topFeature = futures.remove(0);
try {
if(null!=topFeature)topFeature.get();
} catch(InterruptedException | ExecutionException ie) {}
}
pool.shutdown();
timerArray[4][i] = System.nanoTime()-startTimer;
//System.out.println((timerArray[4][i]/1000000.0) + " ms");
}
try {
sortAndWrite(4);
} catch (IOException e) {}
System.out.println();
firstRun = false;
}
static void initArrays(int seed) {
Random r = new Random(seed);
for (int i = 0; i < orginArray.length; i++) {
orginArray[i] = r.nextInt(orginArray.length);
}
}
static void sortAndWrite(int id) throws IOException {
String fileName = names[id] + ".txt";
Writer out = new OutputStreamWriter(new FileOutputStream(fileName, !firstRun));
Arrays.sort(timerArray[id]);
try {
String s = Long.toString(timerArray[id][median]);
out.write(size + "\t" + runs + "\t" + s + "\n");
} finally { out.close(); }
compareAndPrint(id);
}
static void compareAndPrint(int id) {
double time = timerArray[id][median]/1000000.0;
BigDecimal bd = new BigDecimal(time);
if (time >= 1000) bd = bd.setScale(0, BigDecimal.ROUND_UP);
else if (time >= 100) bd = bd.setScale(1, BigDecimal.ROUND_UP);
else if (time >= 10) bd = bd.setScale(2, BigDecimal.ROUND_UP);
else bd = bd.setScale(3, BigDecimal.ROUND_UP);
if (id == 0) System.out.print(names[id] + "\t\t: " + bd.toString() + " ms");
else System.out.print(names[id] + "\t: " + bd.toString() + " ms");
if (id > 0) {
bd = new BigDecimal((timerArray[0][median]*1.0/timerArray[id][median]*1.0) * 100);
bd = bd.setScale(1, BigDecimal.ROUND_UP);
System.out.print("\tspeed: " + bd.toString() + " %");
System.out.print((Arrays.equals(SrtedArray, ReferArray) ? "\n" : "\t!Error: not identical to referance!\n"));
}
else System.out.print("\n");
}
}//”

