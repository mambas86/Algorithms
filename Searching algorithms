//Binary Search codes:
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package searchalgorithm;
 
public class MyBinarySearch {
 
    public int binarySearch(int[] inputArr, int key) {
         
        int start = 0;
        int end = inputArr.length - 1;
        while (start <= end) {
            int mid = (start + end) / 2;
            if (key == inputArr[mid]) {
                return mid;
            }
            if (key < inputArr[mid]) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return 0;
    }
  
    public static void main(String[] args) {//”
       “// MyBinarySearch mbs = new MyBinarySearch();
        long startTime = System.nanoTime();
        int numberOfElement=10;
        int runs =2000;
        for (int i = 0; i < runs; i++) {   
        int[] arr = {1, 2, 3, 4, 5, 6, 7, 8,9, 10};
        System.out.println("Number of Element: "+numberOfElement);
        System.out.println("Key 7's position: "+mbs.binarySearch(arr, 7));
        System.out.println( "Total Time: " + (System.nanoTime() - startTime) / 1000000+ " ms\n");
        }
        
        numberOfElement=20;
        runs=1750;
        for (int i = 0; i < runs; i++) {
        startTime = System.nanoTime();
        int[] arr1 = {1, 2,3, 4, 5, 6,7, 8,9, 10, 11, 12, 13, 14, 15, 16, 17,18,19,20};
        System.out.println("Number of Element: "+numberOfElement);
        System.out.println("Key 20's position: "+mbs.binarySearch(arr1, 20));
         System.out.println( "Total Time: " + (System.nanoTime() - startTime) / 1000000+ " ms\n");
        }
         numberOfElement=50;
         runs=1500;
        for (int i = 0; i < runs; i++) {
         startTime = System.nanoTime();
         int[] arr2 = {1,2, 3, 4, 5,34,78,123,432,900,
             100,101,102,103,105,105,106, 108,109, 120, 
             122,125,126, 129,130,131,135,137,139,140,
             141,145,147,148,148,149,150,151,152,153,
             154,155,156,157,158,159,160,161,162,163};
         System.out.println("Number of Element: "+numberOfElement);
        System.out.println("Key 162's position: "+mbs.binarySearch(arr2, 162));
         System.out.println( "Total Time: " + (System.nanoTime() - startTime) / 1000000+//”


“//
*@ Abbas Muhammad Rabiu
*//
package searchalgorithm;
import java.math.BigDecimal;
 
public class MyBinarySearch {
 
    public int binarySearch(int[] inputArr, int key) {
         
        int start = 0;
        int end = inputArr.length - 1;
        while (start <= end) {
            int mid = (start + end) / 2;
            if (key == inputArr[mid]) {
                return mid;
            }
            if (key < inputArr[mid]) {
                end = mid - 1;//”
           “ } else {
                start = mid + 1;
            }
        }
        return 0;
    }
  
    public static void main(String[] args) {
        MyBinarySearch mbs = new MyBinarySearch();
        //double bd;
        double startTime = System.nanoTime();
        int numberOfElement=10;
        int runs =2000;
        for (int i = 0; i < runs; i++) {   
        int[] arr = {1, 2, 3, 4, 5, 6, 7, 8,9, 10};
        System.out.println("Number of Element: "+numberOfElement);
        System.out.println("Key 7's position: "+mbs.binarySearch(arr, 7));
       // bd= (System.nanoTime() - startTime) / 1000000;
       BigDecimal bd = new BigDecimal((System.nanoTime() - startTime) / 1000000);
//if (startTime>= 1000) bd = bd.setScale(0, BigDecimal.ROUND_UP);
//else if (startTime>= 100) bd = bd.setScale(1, BigDecimal.ROUND_UP);
//else if (startTime>= 10) bd = bd.setScale(2, BigDecimal.ROUND_UP);
//else if(startTime<10)  bd = bd.setScale(3, BigDecimal.ROUND_UP);
bd = bd.setScale(2, BigDecimal.ROUND_UP);
        System.out.println( "Total Time: " + bd.toString()+" ms\n");
        }
        
        numberOfElement=20;
        runs=1750;
        for (int i = 0; i < runs; i++) {
        startTime = System.nanoTime();
        int[] arr1 = {1, 2,3, 4, 5, 6,7, 8,9, 10, 11, 12, 13, 14, 15, 16, 17,18,19,20};
        System.out.println("Number of Element: "+numberOfElement);
        System.out.println("Key 20's position: "+mbs.binarySearch(arr1, 20));
         BigDecimal bd = new BigDecimal((System.nanoTime() - startTime) / 1000000);
//if (startTime>= 1000) bd = bd.setScale(0, BigDecimal.ROUND_UP);
//else if (startTime>= 100) bd = bd.setScale(1, BigDecimal.ROUND_UP);
//else if (startTime>= 10) bd = bd.setScale(2, BigDecimal.ROUND_UP);
//else if(startTime< 10)  bd = bd.setScale(3, BigDecimal.ROUND_UP);
bd = bd.setScale(2, BigDecimal.ROUND_UP);
        System.out.println( "Total Time: " + bd.toString()+" ms\n");
        // System.out.println( "Total Time: " + (System.nanoTime() - startTime) / 1000+ " ms\n");
        }
         numberOfElement=50;
         runs=1500;
        for (int i = 0; i < runs; i++) {
         startTime = System.nanoTime();
         int[] arr2 = {1,2, 3, 4, 5,34,78,123,432,900,
             100,101,102,103,105,105,106, 108,109, 120, //”
             “122,125,126, 129,130,131,135,137,139,140,
             141,145,147,148,148,149,150,151,152,153,
             154,155,156,157,158,159,160,161,162,163};
         System.out.println("Number of Element: "+numberOfElement);
        System.out.println("Key 162's position: "+mbs.binarySearch(arr2, 162));
         BigDecimal bd = new BigDecimal((System.nanoTime() - startTime) / 1000000);
//if (startTime>= 1000) bd = bd.setScale(0, BigDecimal.ROUND_UP);
//else if (startTime>= 100) bd = bd.setScale(1, BigDecimal.ROUND_UP);
//else if (startTime>= 10) bd = bd.setScale(2, BigDecimal.ROUND_UP);
//else if(startTime< 10)  bd = bd.setScale(3, BigDecimal.ROUND_UP);
 bd = bd.setScale(3, BigDecimal.ROUND_UP);
        System.out.println( "Total Time: " + bd.toString()+" ms\n");
         //System.out.println( "Total Time: " + (System.nanoTime() - startTime) / 1000+ " ms\n");
        }
         numberOfElement=100;
         runs =1250;
         for (int i = 0; i < runs; i++) {
         startTime = System.nanoTime();
         int[] arr3 = {1,2,3,4,5,34,48,50,90,98,
             100,101,102,103,105,105,106,108,109,120, 
             122,125,126, 129,130,131,135,137,139,140,
             141,145,147,148,148,149,150,151,152,153,
             154,155,156,157,158,159,160,161,162,163,
             164,165,166,167,168,169,170,172,173,175,
             179,180,182,183,185,186,188,189,190,191,
             192,193,194,195,196,197,198,199,200,201,
             102,203,204,205,206,207,208,209,210,211};
         System.out.println("Number of Element: "+numberOfElement);
        System.out.println("Key 162's position: "+mbs.binarySearch(arr3, 162));
         BigDecimal bd = new BigDecimal((System.nanoTime() - startTime) / 1000000);
//if (startTime>= 1000) bd = bd.setScale(0, BigDecimal.ROUND_UP);
//else if (startTime>= 100) bd = bd.setScale(1, BigDecimal.ROUND_UP);
//else if (startTime>= 10) bd = bd.setScale(2, BigDecimal.ROUND_UP);
//else if(startTime< 10)  bd = bd.setScale(3, BigDecimal.ROUND_UP);
 bd = bd.setScale(2, BigDecimal.ROUND_UP);
        System.out.println( "Total Time: " + bd.toString()+" ms\n");
         //System.out.println( "Total Time: " + (System.nanoTime() - startTime) / 1000+ " ms\n");
         }
         
         numberOfElement=300;
         runs =1000;
         
             546,547,548,549,550,552,553,553,554,555,
             556,557,558,559,560,561,562,563,564,567,
             568,569,570,571,572,573,574,575,576,577,
             578,579,580,581,582,583,584,585,586,587,
             589,590,591,592,593,594,595,596,597,598,
             600,601,602,603,604,605,606,607,608,609,
             610,611,612,613,614,615,616,617,618,619,//”
             “//620,621,622,623,624,625,625,627,628,629,
             630,631,632,633,634,635,636,637,638,639,
             640,641,642,643,644,645,646,647,648,649,
             650,651,652,653,654,655,656,657,658,659,
             670,671,672,673,674,675,676,677,678,679,
             680,681,682,684,685,686,687,688,689,690,
             691,692,693,694,695,696,697,698,699,700,
             701,702,703,705,706,707,708,709,710,711,
             712,713,715,716,717,718,719,720,721,722,
             723,724,725,726,727,728,729,730,731,732,
             733,734,735,736,737,738,739,740,741,742,
             743,744,745,746,747,748,749,750,751,752,
             753,754,755,756,757,758,759,760,761,762,
             763,764,765,766,767,768,768,769,770,771};
                 
         System.out.println("Number of Element: "+numberOfElement);
         System.out.println("Key 771's position: "+mbs.binarySearch(arr5, 771));
          BigDecimal bd = new BigDecimal((System.nanoTime() - startTime) / 1000000);
//if (startTime>= 1000) bd = bd.setScale(0, BigDecimal.ROUND_UP);
//else if (startTime>= 100) bd = bd.setScale(1, BigDecimal.ROUND_UP);
//else if (startTime>= 10) bd = bd.setScale(2, BigDecimal.ROUND_UP);
//else if(startTime< 10)  bd = bd.setScale(3, BigDecimal.ROUND_UP);
bd = bd.setScale(3, BigDecimal.ROUND_UP);
        System.out.println( "Total Time: " + bd.toString()+" ms\n");
         //System.out.println( "Total Time: " + (System.nanoTime() - startTime) / 1000+ " ms\n");
         }
             
             
        numberOfElement=800;
         runs =500;
          for (int i = 0; i < runs; i++) {
         startTime = System.nanoTime();
         int[] arr6 = {1,2,3,4,5,34,48,50,90,98,
             100,101,102,103,105,105,106,108,109,120, 
             122,125,126, 129,130,131,135,137,139,140,
             141,145,147,148,148,149,150,151,152,153,
             154,155,156,157,158,159,160,161,162,163,
             164,165,166,167,168,169,170,172,173,175,
             179,180,182,183,185,186,188,189,190,191,
             192,193,194,195,196,197,198,199,200,201,
             102,203,204,205,206,207,208,209,210,211,
             212,213,214,215,216,217,218,219,220,221,
             222,223,224,225,226,227,228,228,230,233,
             235,236,238,239,239,300,302,303,304,305,
             306,307,308,308,309,400,401,402,403,404,
             405,405,406,407,408,409,410,411,412,413,
             414,415,416,417,418,419,500,501,502,503,
             504,505,506,507,508,509,510,511,512,513,
             514,516,517,518,519,520,521,522,523,524,//”
            “// 525,526,527,528,529,530,531,532,533,534,
             535,536,537,538,539,540,542,543,544,545,
             546,547,548,549,550,552,553,553,554,555,
             556,557,558,559,560,561,562,563,564,567,
             568,569,570,571,572,573,574,575,576,577,
             578,579,580,581,582,583,584,585,586,587,
             589,590,591,592,593,594,595,596,597,598,
             600,601,602,603,604,605,606,607,608,609,
             610,611,612,613,614,615,616,617,618,619,
             620,621,622,623,624,625,625,627,628,629,
             630,631,632,633,634,635,636,637,638,639,
             640,641,642,643,644,645,646,647,648,649,
             650,651,652,653,654,655,656,657,658,659,
             670,671,672,673,674,675,676,677,678,679,
             680,681,682,684,685,686,687,688,689,690,
             691,692,693,694,695,696,697,698,699,700,
             701,702,703,705,706,707,708,709,710,711,
             712,713,715,716,717,718,719,720,721,722,
             723,724,725,726,727,728,729,730,731,732,
             733,734,735,736,737,738,739,740,741,742,
             743,744,745,746,747,748,749,750,751,752,
             753,754,755,756,757,758,759,760,761,762,
             763,764,765,766,767,768,768,769,770,771,
             1111,1112,1113,1114,1115,11134,11148,11150,11190,11198,
             111100,111101,111102,111103,111105,111105,111106,111108,111109,111120, 
             111122,111125,111126, 111129,111130,111131,111135,111137,111139,111140,
             111141,111145,111147,111148,111148,111149,111150,111151,111152,111153,
             111154,111155,111156,111157,111158,111159,111160,111161,111162,111163,
             111164,111165,111166,111167,111168,111169,111170,111172,111173,111175,
             111179,111180,111182,111183,111185,111186,111188,111189,111190,111191,
             111192,111193,111194,111195,111196,111197,11198,111199,111200,111201,
             111102,111203,111204,111205,111206,111207,111208,111209,111210,111211,
             111212,111213,111214,111215,111216,111217,111218,111219,111220,111221,
             111222,111223,111224,111225,111226,111227,111228,111228,111230,111233,
             111235,111236,111238,111239,111239,111300,111302,111303,111304,111305,
             111306,111307,111308,111308,111309,111400,111401,111402,111403,111404,
             111405,411105,111406,111407,111408,111409,111410,111411,111412,111413,
             111414,111415,111416,111417,111418,111419,111500,111501,111502,111503,
             111504,111505,111506,111507,111508,111509,111510,111511,111512,111513,
             111514,111516,111517,111518,111519,111520,111521,111522,111523,111524,
             111525,111526,111527,111528,111529,111530,111531,111532,111533,111534,
             111535,111536,111537,111538,111539,111540,111542,111543,111544,111545,
             111546,111547,111548,111549,111550,111552,111553,111553,111554,111555,
             111556,111557,111558,111559,111560,111561,111562,111563,111564,111567,
             111568,111569,111570,111571,111572,111573,111574,111575,111576,111577,
             111578,111579,111580,111581,111582,111583,111584,111585,111586,111587,
             111589,111590,111591,111592,111593,111594,111595,111596,111597,111598,
             111600,111601,111602,111603,111604,111605,111606,111607,111608,111609,
             111610,111611,111612,111613,111614,111615,111616,111617,111618,111619,//’’
            “// 111620,111621,111622,111623,111624,111625,111625,111627,111628,111629,
             111630,111631,111632,111633,111634,111635,111636,111637,111638,111639,
             111640,111641,111642,111643,111644,111645,111646,111647,111648,111649,
             111650,111651,111652,111653,111654,111655,111656,111657,111658,111659,
             111670,111671,111672,111673,111674,111675,111676,111677,111678,111679,
             111680,111681,111682,111684,111685,111686,111687,111688,111689,111690,
             111691,111692,111693,111694,111695,111696,111697,111698,111699,111700,
             111701,111702,111703,111705,111706,111707,111708,111709,111710,111711,
             111712,111713,111715,111716,111717,111718,111719,111720,111721,111722,
             111723,111724,111725,111726,111727,111728,111729,111730,111731,111732,
             111733,111734,111735,111736,111737,111738,111739,111740,111741,111742,
             111743,111744,111745,111746,111747,111748,111749,111750,111751,111752,
             111753,111754,111755,111756,111757,111758,111759,111760,111761,111762,
             111763,111764,111765,111766,111767,111768,111768,111769,111770,111771};             
         System.out.println("Number of Element: "+numberOfElement);
         System.out.println("Key 111771's position: "+mbs.binarySearch(arr6, 111771));
          BigDecimal bd = new BigDecimal((System.nanoTime() - startTime) / 1000000);
//if (startTime>= 1000) bd = bd.setScale(0, BigDecimal.ROUND_UP);
//else if (startTime>= 100) bd = bd.setScale(1, BigDecimal.ROUND_UP);
//else if (startTime>= 10) bd = bd.setScale(2, BigDecimal.ROUND_UP);
//else if(startTime< 10)  bd = bd.setScale(3, BigDecimal.ROUND_UP);
bd = bd.setScale(3, BigDecimal.ROUND_UP);
        System.out.println( "Total Time: " + bd.toString()+" ms\n");
         //System.out.println( "Total Time: " + (System.nanoTime() - startTime) / 1000+ " ms\n");
          }
          
          numberOfElement=1200;
         runs =250;
          for (int i = 0; i < runs; i++) {
         startTime = System.nanoTime();
         int[] arr7 = {1,2,3,4,5,34,48,50,90,98,
             100,101,102,103,105,105,106,108,109,120, 
             122,125,126, 129,130,131,135,137,139,140,
             141,145,147,148,148,149,150,151,152,153,
             154,155,156,157,158,159,160,161,162,163,
             164,165,166,167,168,169,170,172,173,175,
             179,180,182,183,185,186,188,189,190,191,
             192,193,194,195,196,197,198,199,200,201,
             102,203,204,205,206,207,208,209,210,211,
             212,213,214,215,216,217,218,219,220,221,
             222,223,224,225,226,227,228,228,230,233,
             235,236,238,239,239,300,302,303,304,305,
             306,307,308,308,309,400,401,402,403,404,
             405,405,406,407,408,409,410,411,412,413,
             414,415,416,417,418,419,500,501,502,503,
             504,505,506,507,508,509,510,511,512,513,
             514,516,517,518,519,520,521,522,523,524,
             525,526,527,528,529,530,531,532,533,534,
             535,536,537,538,539,540,542,543,544,545,//”
            “// 546,547,548,549,550,552,553,553,554,555,
             556,557,558,559,560,561,562,563,564,567,
             568,569,570,571,572,573,574,575,576,577,
             578,579,580,581,582,583,584,585,586,587,
             589,590,591,592,593,594,595,596,597,598,
             600,601,602,603,604,605,606,607,608,609,
             610,611,612,613,614,615,616,617,618,619,
             620,621,622,623,624,625,625,627,628,629,
             630,631,632,633,634,635,636,637,638,639,
             640,641,642,643,644,645,646,647,648,649,
             650,651,652,653,654,655,656,657,658,659,
             670,671,672,673,674,675,676,677,678,679,
             680,681,682,684,685,686,687,688,689,690,
             691,692,693,694,695,696,697,698,699,700,
             701,702,703,705,706,707,708,709,710,711,
             712,713,715,716,717,718,719,720,721,722,
             723,724,725,726,727,728,729,730,731,732,
             733,734,735,736,737,738,739,740,741,742,
             743,744,745,746,747,748,749,750,751,752,
             753,754,755,756,757,758,759,760,761,762,
             763,764,765,766,767,768,768,769,770,771,
             1111,1112,1113,1114,1115,11134,11148,11150,11190,11198,
             111100,111101,111102,111103,111105,111105,111106,111108,111109,111120, 
             111122,111125,111126, 111129,111130,111131,111135,111137,111139,111140,
             111141,111145,111147,111148,111148,111149,111150,111151,111152,111153,
             111154,111155,111156,111157,111158,111159,111160,111161,111162,111163,
             111164,111165,111166,111167,111168,111169,111170,111172,111173,111175,
             111179,111180,111182,111183,111185,111186,111188,111189,111190,111191,
             111192,111193,111194,111195,111196,111197,11198,111199,111200,111201,
             111102,111203,111204,111205,111206,111207,111208,111209,111210,111211,
             111212,111213,111214,111215,111216,111217,111218,111219,111220,111221,
             111222,111223,111224,111225,111226,111227,111228,111228,111230,111233,
             111235,111236,111238,111239,111239,111300,111302,111303,111304,111305,
             111306,111307,111308,111308,111309,111400,111401,111402,111403,111404,
             111405,411105,111406,111407,111408,111409,111410,111411,111412,111413,
             111414,111415,111416,111417,111418,111419,111500,111501,111502,111503,
             111504,111505,111506,111507,111508,111509,111510,111511,111512,111513,
             111514,111516,111517,111518,111519,111520,111521,111522,111523,111524,
             111525,111526,111527,111528,111529,111530,111531,111532,111533,111534,
             111535,111536,111537,111538,111539,111540,111542,111543,111544,111545,
             111546,111547,111548,111549,111550,111552,111553,111553,111554,111555,
             111556,111557,111558,111559,111560,111561,111562,111563,111564,111567,
             111568,111569,111570,111571,111572,111573,111574,111575,111576,111577,
             111578,111579,111580,111581,111582,111583,111584,111585,111586,111587,
             111589,111590,111591,111592,111593,111594,111595,111596,111597,111598,
             111600,111601,111602,111603,111604,111605,111606,111607,111608,111609,
             111610,111611,111612,111613,111614,111615,111616,111617,111618,111619,
             111620,111621,111622,111623,111624,111625,111625,111627,111628,111629,
             111630,111631,111632,111633,111634,111635,111636,111637,111638,111639,//”
